`timescale 1ns / 1ps

module rom(
    input logic [31:0] addr,
    output logic [31:0] data
    );
    logic [31:0] rom [0:15];

    //rom[x] = 32'b func7_rs2_rs1_f3_rd_opcode (R-Type)
    initial begin 
        rom[0] = 32'b0000000_01011_01100_000_00100_0110011; //add x4, x12, x11    12(144)+11(121) = 265
        rom[1] = 32'b0100000_01011_01100_000_00101_0110011; //sub x5, x12, x11    12(144)-11(121) = 23
        rom[2] = 32'b0000000_00010_01100_001_00110_0110011; //sll x6, x12, x2    12(144)<<2(4) = 0000_1001_0000_0000
        rom[3] = 32'b0000000_00010_01100_101_00111_0110011; //srl x7, x12, x2    12(144)>>2(4) = 0000_0000_0000_1001
        rom[4] = 32'b0100000_00010_00001_101_01000_0110011; //sra x8, x0, x2    x0>>>2(4) =  
        rom[5] = 32'b0000000_00010_01100_010_01001_0110011; //slt x9, x12, x2    12(144)<2(4) = 0
        rom[6] = 32'b0000000_01100_00010_011_01010_0110011; //sltu x10, x2, x12  2(4)<12(144) = 1
        rom[7] = 32'b0000000_01101_01100_100_01011_0110011; //xor x11, x12, x13   12(144)^13(169) = 10010000 ^ 10101001 = 00111001(57)  
        rom[8] = 32'b0000000_01010_00101_110_01100_0110011; //or x12, x5, x10    23|1 = 10111 | 00001 = 10111(23)
        rom[9] = 32'b0000000_00011_00010_111_01101_0110011; //and x13, x2, x1   2(4)&3(9) = 0100 & 1001 = 0000(0)
    end

    assign data = rom[addr[31:2]]; // 4의 배수로 가기 위해서 0, 1 무시
endmodule
